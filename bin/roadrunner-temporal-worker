#!/usr/bin/env php
<?php
declare(strict_types=1);

use Keepsuit\LaravelTemporal\Facade\Temporal;
use Keepsuit\LaravelTemporal\Interceptors\ApplicationSandboxInterceptor;
use Keepsuit\LaravelTemporal\Support\ApplicationFactory;
use Keepsuit\LaravelTemporal\Support\CurrentApplication;
use Keepsuit\LaravelTemporal\TemporalRegistry;
use Spiral\Goridge\Exception\RelayException;
use Temporal\DataConverter\DataConverterInterface;
use Temporal\Interceptor\SimplePipelineProvider;
use Temporal\WorkerFactory;

$basePath = require __DIR__.'/bootstrap.php';

\Temporal\Worker\FeatureFlags::$workflowDeferredHandlerStart = true;
\Temporal\Worker\FeatureFlags::$cancelAbandonedChildWorkflows = false;

$app = (new ApplicationFactory($basePath))->createApplication();
CurrentApplication::setRootApp($app);

if ($app->environment() !== 'production' && env('TEMPORAL_TESTING_ENV')) {
    Temporal::initFakeWorker();
}

/** @var TemporalRegistry $registry */
$registry = $app->make(TemporalRegistry::class);

// factory initiates and runs task queue specific activity and workflow workers
$factory = WorkerFactory::create(
    converter: $app->make(DataConverterInterface::class)
);

$taskQueue = env('TEMPORAL_QUEUE', \Temporal\Worker\WorkerFactoryInterface::DEFAULT_TASK_QUEUE);
assert(is_string($taskQueue), 'TEMPORAL_QUEUE must be a string');

// Worker that listens on a Task Queue and hosts both workflow and activity implementations.
$worker = $factory->newWorker(
    taskQueue: $taskQueue,
    options: Temporal::buildWorkerOptions($taskQueue),
    interceptorProvider: new SimplePipelineProvider(array_map(
        fn (string $className) => $app->make($className),
        array_merge([
            ApplicationSandboxInterceptor::class,
        ], $app['config']->get('temporal.interceptors', []))
    )),
    logger: $app['log']
);

foreach ($registry->workflows() as $workflow) {
    $worker->registerWorkflowTypes($workflow);
}

foreach ($registry->activities() as $activity) {
    $worker->registerActivity($activity, fn (ReflectionClass $class) => $app->make($class->getName()));
}

try {
    $factory->run();
} catch (RelayException $e) {
    exit(1);
}
